openapi: 3.0.0
info:
  title: Wanderlust Travel API
  version: 1.0.0
  description: RESTful API for hotel browsing, booking, and review features.
servers:
- url: http://localhost:3000
paths:
  /auth/register:
    post:
      summary: Register user
      tags:
      - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - username
              - password
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum:
                  - user
                  - admin
      responses:
        '201':
          description: User registered
        '409':
          description: Username already taken
  /auth/login:
    post:
      summary: Login
      tags:
      - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - username
              - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Logged in with token
        '401':
          description: Invalid credentials
  /hotels:
    get:
      summary: List all hotels (public)
      tags:
      - Hotels
      parameters:
      - in: query
        name: page
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
      - in: query
        name: minStars
        schema:
          type: integer
      responses:
        '200':
          description: Hotel list with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  totalItems:
                    type: integer
                  hotels:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hotel'
    post:
      summary: Add a new hotel (admin)
      tags:
      - Hotels
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hotel'
      responses:
        '201':
          description: Hotel created
  /hotels/popular:
    get:
      summary: Get most reviewed hotels
      tags:
      - Hotels
      responses:
        '200':
          description: Popular hotels
          content:
            application/json:
              schema:
                type: object
              properties:
                total:
                  type: integer
                hotels:
                  type: array
              items:
                type: object
                properties:
                  hotelId:
                    type: string
                  name:
                    type: string
                  location:
                    type: string
                  type:
                    type: string
                  starRating:
                    type: integer
                  imageUrl:
                    type: string
                  reviewCount:
                    type: integer
                  avgRating:
                    type: number
  /reviews:
    post:
      summary: Add a review (user only)
      tags:
      - Reviews
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review submitted
  /reviews/me/reviews:
    get:
      summary: Get current user's reviews
      tags:
      - Reviews
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of user's reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
  /reviews/{id}:
    put:
      summary: Update own review
      tags:
      - Reviews
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                comment:
                  type: string
      responses:
        '200':
          description: Review updated
    delete:
      summary: Delete own review
      tags:
      - Reviews
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Review deleted
  /admin/review-stats:
    get:
      summary: Admin get review stats
      tags:
      - Admin
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Review statistics
          content:
            application/json: null
          schema:
            type: object
            properties:
              stats:
                type: array
                items:
                  type: object
                  properties:
                    hotelId:
                      type: string
                    hotelName:
                      type: string
                    count:
                      type: integer
                    avgRating:
                      type: number
  /users/me:
    get:
      summary: Get current user profile
      tags:
      - User
      security:
      - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update current user profile
      tags:
      - User
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
        '404':
          description: User not found
  /favorites:
    get:
      summary: Get all favorite hotels for the current user
      tags:
      - Favorites
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of favorite hotels
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    hotel:
                      type: string
                    user:
                      type: string
    post:
      summary: Add a hotel to favorites
      tags:
      - Favorites
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hotelId:
                  type: string
              required:
              - hotelId
      responses:
        '201':
          description: Favorite added
        '400':
          description: Invalid request
  /favorites/{id}:
    delete:
      summary: Remove a hotel from favorites
      tags:
      - Favorites
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Favorite removed
        '404':
          description: Favorite not found
  /favorites/{hotelId}:
    get:
      summary: Check if a hotel is in user's favorites
      tags:
      - Favorites
      security:
      - bearerAuth: []
      parameters:
      - name: hotelId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Favorite status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFavorite:
                    type: boolean
  /bookings:
    get:
      summary: Get current user's bookings
      tags:
      - Bookings
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    hotel:
                      type: string
                    user:
                      type: string
                    checkIn:
                      type: string
                      format: date
                    checkOut:
                      type: string
                      format: date
                    guests:
                      type: integer
    post:
      summary: Create a new booking
      tags:
      - Bookings
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - hotelId
              - checkIn
              - checkOut
              - guests
              properties:
                hotelId:
                  type: string
                checkIn:
                  type: string
                  format: date
                checkOut:
                  type: string
                  format: date
                guests:
                  type: integer
      responses:
        '201':
          description: Booking created
        '400':
          description: Invalid booking data
  /bookings/{id}:
    delete:
      summary: Cancel a booking by ID
      tags:
      - Bookings
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Booking cancelled
        '403':
          description: Unauthorized
        '404':
          description: Booking not found
  /upload/avatar:
    post:
      summary: Upload user profile avatar
      tags:
      - Upload
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
              - avatar
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatarUrl:
                    type: string
        '400':
          description: Invalid file
        '401':
          description: Unauthorized
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
        role:
          type: string
          enum:
          - user
          - admin
    UserUpdate:
      type: object
      properties:
        username:
          type: string
        avatarUrl:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearerAuth: []
